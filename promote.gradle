
def localPath = "/some/release/"
def tmpDir = 'tmp'

def remoteUserName = 'username'
def remoteServer = 'ssh.server.name'
def remotePath = '/folder/on/server'

def getPromoteVersion() { 
    if (project.hasProperty('Version')) { 
        return project.getProperty('Version')
    } else {
        throw new GradleException('Input error occurred, please set -PVersion=1.0.0.1')
    }
}

// We define a new configuration with the name 'sshAntTask'.
// This configuration is used to define our dependencies.
configurations {
    sshAntTask
}
 
// Define the Maven central repository to look for the dependencies.
repositories {
    mavenCentral()
}
 
// Assign dependencies to the sshAntTask configuration.
dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.9.4', 'jsch:jsch:0.1.29'
}
 
// Task which uses the scp Ant optional task.
task promote << {
    description = 'promote files onto remote server.'

    // Get passphrase from user input.
    def console = System.console()
    def passphrase = '' //console.readPassword('%s: ', 'Please enter the passphrase for the keyfile')
        
    // Redefine scp Ant task, with the classpath property set to our newly defined
    // sshAntTask configuration classpath.
    ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath)
            
    // Invoke the scp Ant task. (Use gradle -i update to see the output of the Ant task.)
    ant.scp(todir: remoteUserName + '@' + remoteServer + ':' + remotePath,
            keyfile: '${user.home}/.ssh/id_rsa', 
            passphrase: passphrase as String, // Use phassphrase entered by the user.
            trust: "true",
            verbose: 'true') {
        fileset(dir: tmpDir) {
            include(name: '**/*')
        }
    }            
}

// Task to construct the folder
task construct << {
    description = 'construct the folder.'

    def version = getPromoteVersion()
    def subPath = 'subapps_' + version

    // source file
    def source = fileTree(localPath).matching {
        include '**/*_' + version + '.zip'
        exclude 'current'
    }.files
    copy {
        from source
        into tmpDir + '/' + subPath
        includeEmptyDirs false
    }
    fileTree(dir: tmpDir + '/' + subPath).each {
        ant.checksum file: it.path
    }
}

promote.dependsOn 'construct'
defaultTasks 'promote'
